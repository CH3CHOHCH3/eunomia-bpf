name: Build and test compiler on Ubuntu

on:
  push:
    branches: "*"
    tags:
      - "v*"
  pull_request:
    branches: "*"
    tags:
      - "v*"

env:
  TAG_NAME: ${{ git.ref }}
  BUILD_TYPE: Release
  INSTALL_LOCATION: .local

jobs:
  build:

    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"

    steps:
    - uses: actions/checkout@v2

    - name: get submodule
      run:  git submodule update --init --recursive

    - name: install deps
      run: |
          sudo make -C compiler install-deps
          cargo install clippy-sarif sarif-fmt grcov
          rustup component add llvm-tools-preview

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af #@v1
      with:
        profile: minimal
        toolchain: stable
        components: clippy
        override: true

    - name: cache dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{ github.workspace }}/${{ env.INSTALL_LOCATION }}
        key: ${{ runner.os }}-dependencies

    - name: build ecc
      run:  cd compiler && make && make install

    - name: test ecc
      run:  cd compiler && make test
    - name: Upload analysis results to GitHub
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: compiler/cmd/rust-clippy-results.sarif
        wait-for-processing: true

    - name: Code coverage using Codecov
      run: bash <(curl -s https://codecov.io/bash)

    - name: Upload release asset
      uses: actions/upload-artifact@v2
      with:
        name: ECC-${{ env.TAG_NAME }}
        path: compiler/workspace/bin/ecc-${{ env.TAG_NAME }}

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: ecc Release ${{ env.TAG_NAME }}
        draft: false
        prerelease: false
        assets_path: compiler/workspace/bin/ecc-${{ env.TAG_NAME }}
        assets_name: ecc-${{ env.TAG_NAME }}

